using System.IO;
using Robust.Client.AutoGenerated;
using Robust.Client.Input;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using static Robust.Client.UserInterface.Controls.BaseButton;
using Content.Client.Dmm.Interpreter;

namespace Content.Client.Dmm.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class DmmViewer : DefaultWindow
    {
        private bool _isFileDlgOpen = false;
        private DmmMap? _map;
        [Dependency] private readonly IFileDialogManager _fileDialogManager = default!;
        [Dependency] private readonly IEntityManager _entityManager = default!;
        [Dependency] private readonly IDmmParser _dmmParser = default!;
        public DmmViewer()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            SelectFile.OnPressed += OpenFileDialog;
        }

        private async void OpenFileDialog(ButtonEventArgs obj)
        {
            if (_isFileDlgOpen) return;

            var filters = new FileDialogFilters(new FileDialogFilters.Group("dmm", "DMM"));
            _isFileDlgOpen = true;
            await using var file = await _fileDialogManager.OpenFile(filters);
            _isFileDlgOpen = false;

            // if the UI closes, do nothing
            if (Disposed) return;
            // if file was not selected, return
            if (file == null) return;

            await using var memStream = new MemoryStream((int) file.Length);
            await file.CopyToAsync(memStream);
            _map = _dmmParser.Parse(memStream.GetBuffer());

            // then unlock the spawn map button
            SpawnMap.Disabled = false;
            return;
        }
    }
}
