using Content.Shared.FixedPoint;
using Content.Shared.IdentityManagement;
using Content.Shared.Temperature;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using System.Text;
using static Content.Shared.MedicalScanner.SharedMedicalThermometerComponent;

namespace Content.Client.MedicalThermometer.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class MedicalThermometerWindow : DefaultWindow
    {
        public MedicalThermometerWindow()
        {
            RobustXamlLoader.Load(this);
        }

        public void Populate(MedicalThermometerScannedUserMessage msg)
        {
            var text = new StringBuilder();
            var entities = IoCManager.Resolve<IEntityManager>();

            if (msg.TargetEntity != null //&& entities.TryGetComponent<TemperatureComponent>(msg.TargetEntity.Value, out var temperature)
                                         )
            {
                string entityName = "Unknown";
                if (msg.TargetEntity != null &&
                    entities.TryGetComponent<MetaDataComponent>(msg.TargetEntity.Value, out var metaData))
                    entityName = Identity.Name(msg.TargetEntity.Value, entities);

                text.Append(entityName + "'s Temperature\n");

                text.Append(Loc.GetString("gas-analyzer-window-temperature-val-text",
                        ("tempK", $"{msg.EntityTemperature:0.#}"),
                        ("tempC", $"{TemperatureHelpers.KelvinToCelsius(msg.EntityTemperature):0.#}")));

                Temperature.Text = text.ToString();
            }
            else
            {
                Temperature.Text = Loc.GetString("health-analyzer-window-no-patient-data-text");
            }
        }
    }
}
